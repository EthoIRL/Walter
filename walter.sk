# Walter Anticheat
# Created By LIWKK (Johannes) and EthoCryantic (Etho)


# Please use the Ingame Settings GUI to change options (This is just the Default config)
options:
	# [Version] current version of Walter :)
	Version: 1.0

	# [LagCore] Enable LagCore, LagCore helps prevent false positives by monitoring ticks per second (TPS, We suggest you keep this enabled)
	LagCore: true

	# [LagCore] Maximum TPS (Not adverage count) the anticheat will allow before registering as lagging E.g(Chunk Loading, Player Joins, New Chunk loading, tnt, etc).
	LagCore.MaxTPS: 21.85

	# [LagCore] Minimum TPS (Not adverage count) the anticheat will allow before registering as lagging E.g(Chunk Loading, Player Joins, New Chunk loading, tnt, etc).
	LagCore.MinTPS: 18.15

	# [LagCore] The ammount of time you want neon to stop flagging players when the server lags badly. 6
	LagCore.SevereLag.timer: 6 seconds

	# [LagCore] The ammount of time you want neon to stop flagging players when the server lags slightly. 3
	LagCore.MinorLag.timer: 3 seconds

on script load:
	if {Walter::Settings::Version} is not set:
		set {Walter::Settings::Version} to {@Version}
	if {Walter::Settings::LagCore} is not set:
		set {Walter::Settings::LagCore} to {@LagCore}
	if {Walter::Settings::LagCore::MaxTPS} is not set:
		set {Walter::Settings::LagCore::MaxTPS} to {@LagCore.MaxTPS}
	if {Walter::Settings::LagCore::MinTPS} is not set:
		set {Walter::Settings::LagCore::MinTPS} to {@LagCore.MinTPS}
	if {Walter::Settings::LagCore::SevereLag} is not set:
		set {Walter::Settings::LagCore::SevereLag} to {@LagCore.SevereLag.timer}
	if {Walter::Settings::LagCore::MinorLag} is not set:
		set {Walter::Settings::LagCore::MinorLag} to {@LagCore.MinorLag.timer}
	# TODO: Update Check / Internet Check


#LagCore by Neon (https://forums.skunity.com/resources/neon-anticheat-packet-detections.907/)
every second:
	if {Walter::Settings::LagCore} = true:
		if {Walter::LagCore::DisableTimer} != 0 seconds:
			remove 1 second from {Walter::LagCore::DisableTimer}
		else:
			delete {Walter::LagCore::DisableType}
		add 1 to {Walter::LagCore::Switch}
		if {Walter::LagCore::Switch} = 1:
			set {Walter::LagCore::PrevTime} to unix timestamp of now
		if {Walter::LagCore::Switch} = 2:
			delete {Walter::LagCore::Switch}
			set {Walter::LagCore::TPS} to 20 / (unix timestamp of now - {Walter::LagCore::PrevTime})
			if check [{Walter::LagCore::TPS} > {Walter::Settings::LagCore::MaxTPS}] or [{Walter::LagCore::TPS} < {Walter::Settings::LagCore::MinTPS}]:
				if check [{Walter::LagCore::TPS} > 40] or [{Walter::LagCore::TPS} < 10]:
					if check [{Walter::LagCore::DisableTimer} != 0 seconds]->[{Walter::LagCore::DisableTimer} <= 12 seconds]:
						add {Walter::Settings::LagCore::SevereLag} to {Walter::LagCore::DisableTimer}
					else:
						set {Walter::LagCore::DisableTimer} to {Walter::Settings::LagCore::SevereLag}
					set {Walter::LagCore::DisableType} to "S"
				else:
					if check [{Walter::LagCore::DisableTimer} != 0 seconds]->[{Walter::LagCore::DisableTimer} <= 9 seconds]:
						add {Walter::Settings::LagCore::MinorLag} to {Walter::LagCore::DisableTimer}
					else:
						set {Walter::LagCore::DisableTimer} to {Walter::Settings::LagCore::MinorLag}
					set {Walter::LagCore::DisableType} to "M"

# Walter Utilites+
on join:
	set {Walter::PlayerData::%player's uuid%::Utilites::IsDead} to false

on death:
	victim is player
	set {Walter::PlayerData::%player's uuid%::Utilites::IsDead} to true
on respawn:
	set {Walter::PlayerData::%player's uuid%::Utilites::IsDead} to false

on rightclick:
	if player's tool is ender pearl:
		set {Walter::PlayerData::%player's uuid%::Utilites::Enderpearling} to true
on projectile hit:
	if event-entity is a ender pearl:
		set {Walter::PlayerData::%event-entity's uuid%::Utilites::Enderpearling} to false

on join:
	set {Walter::PlayerData::%player's uuid%::Utilites::JoinTime} to now

on damage:
	victim is player
	set {Walter::PlayerData::%victim's uuid%::Utilites::LastDamage} to now
	set {Walter::PlayerData::%victim's uuid%::Utilites::IsAttacked} to true
	wait 3.25 ticks
	set {Walter::PlayerData::%victim's uuid%::Utilites::IsAttacked} to false

on place:
	if event-entity is player:
		set {Walter::PlayerData::%player's uuid%::Utilites::LastPlace} to now

# Utility Functions
function IsDead(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if {Walter::PlayerData::%{_uuid}%::Utilites::IsDead} = true:
		return true
	else:
		return false

function IsEnderpearling(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if {Walter::PlayerData::%{_uuid}%::Utilites::Enderpearling} = true:
		return true
	else:
		return false

function IsCreative(p: player) :: boolean:
	if gamemode of {_p} is survival or adventure:
		return false
	else:
		return true
	return false

function IsJoining(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if difference between {Walter::PlayerData::%{_uuid}%::Utilites::JoinTime} and now < 1.5 seconds: #8
		return true
	else:
		return false

function IsAttacked(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if {Walter::PlayerData::%{_uuid}%::Utilites::IsAttacked} = true:
		return true
	else:
		return false

function DistanceToGround(p: player) :: number:
	loop 256 times:
		if block loop-numbers below {_p} is not air:
			set {_A} to loop-numbers
			remove 1 from {_A}
			set {_D} to {_p}'s y-coord - {_A}
			set {_Cw} to abs({_D} - floor({_D}))
			add {_A} to {_Cw}
			return {_Cw}
			exit 1 loop
	return null

function OpenMenu(p: player, n: number):
	if {_n} = 1:
		create a gui with virtual chest named "&7&lWalter &a&lChecks" with 4 rows:
			set {_W} to White Stained Glass pane
			set {_R} to Red Stained Glass pane
			set {_G} to Green Stained Glass pane
			make gui slot 0 with {_W} named "&r"
			loop 36 times:
				if loop-value = 10 or 11 or 12 or 13 or 14 or 15 or 16 or 19 or 20 or 21 or 22 or 23 or 24 or 25 or 35:
					if loop-value = 10:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 11:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 12:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 13:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 14:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 15:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 16:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 19:
						make gui slot loop-value with {_R} named "Fly"
					if loop-value = 20:
						make gui slot loop-value with {_R} named "Fly"

					if loop-value = 35:
						make gui slot loop-value with {_G} named "Toggle All"
				else:
					make gui slot loop-value with {_W} named "&r"
	else if {_n} = 2:
		create a gui with virtual chest named "&7&lWalter &a&lSettings" with 4 rows:
			set {_W} to White Stained Glass pane
			set {_R} to Red Stained Glass pane
			set {_G} to Green Stained Glass pane
			make gui slot 0 with {_W} named "&r"
			loop 36 times:
				if loop-value = 10 or 11 or 12 or 13 or 14 or 15 or 16 or 19 or 20 or 21 or 22 or 23 or 24 or 25:
					if loop-value = 10:
						make gui slot loop-value with {_R} named "LagCore":
							SubMenu({_p}, "LagCore")
				else:
					make gui slot loop-value with {_W} named "&r"
	else if {_n} = 3:
		create a gui with virtual chest named "&7&lWalter &a&lPlayers" with 3 rows:
			make gui slot 0 with {_W} named "Fly":
				send "Fly Checks"
			make gui slot 1 with {_W} named "Speed":
				send "Fly Checks"
			make gui slot 2 with {_W} named "Killaura":
				send "Fly Checks"
			make gui slot 3 with {_W} named "Criticals":
				send "Fly Checks"
	open last gui to {_p}

function SubMenu(p: player, n: String):
	if {_n} is "LagCore":
		create a gui with virtual chest named "&7&lWalter -> -> &6&lLagCore" with 4 rows:
			set {_W} to White Stained Glass pane
			make gui slot 0 with {_W} named "&r"
			loop 36 times:
				if loop-value = 10 or 11 or 12 or 13 or 14 or 15 or 16 or 19 or 20 or 21 or 22 or 23 or 24 or 25:
					if loop-value = 10:
						if {Walter::Settings::LagCore} = true:
							set {_Color1} to Green Stained Glass pane
							set {_ColorText1} to "&a&l"
							set {_Text} to "&a&lenabled"
						else:
							set {_Color1} to Red Stained Glass pane
							set {_ColorText1} to "&c&l"
							set {_Text} to "&c&ldisabled"
						set line 1 of lore of {_Color1} to "&7Description: LagCore helps prevent false positives by monitoring ticks per second"
						set line 2 of lore of {_Color1} to "&7(TPS, We suggest you keep this enabled)."
						set line 4 of lore of {_Color1} to "&7Currently: %{_Text}%"
						make gui slot loop-value with {_Color1} named "%{_ColorText1}%LagCore":
							if {Walter::Settings::LagCore} = false:
								set {Walter::Settings::LagCore} to true
								SubMenu({_p}, "LagCore")
							else:
								set {Walter::Settings::LagCore} to false
								SubMenu({_p}, "LagCore")
					if loop-value = 11:
						set {_Color1} to Gray Stained Glass pane
						set {_ColorText1} to "&a&l"
						set {_Text} to "&a&l%{Walter::Settings::LagCore::MaxTPS}%"

						set line 1 of lore of {_Color1} to "&7Maximum TPS (Not adverage count) the anticheat will allow before registering as lagging"
						set line 2 of lore of {_Color1} to "&7E.g(Chunk Loading, Player Joins, New Chunk loading, tnt, etc)."
						set line 4 of lore of {_Color1} to "&7Current Value: %{_Text}%"

						make gui slot loop-value with {_Color1} named "%{_ColorText1}%MaxTPS":
							send "&7Type &c&lCANCEL &7to cancel the value change &8(&7Current Value: %{_Text}%&8)"
							set {_uuid} to {_p}'s uuid
							set {Walter::PlayerData::%{_uuid}%::Chat::ValueChange} to "MaxTPS"
							close player's inventory
					if loop-value = 12:
						set {_Color1} to Gray Stained Glass pane
						set {_ColorText1} to "&a&l"
						set {_Text} to "&a&l%{Walter::Settings::LagCore::MinTPS}%"

						set line 1 of lore of {_Color1} to "&7Minimum TPS (Not adverage count) the anticheat will allow before registering as lagging"
						set line 2 of lore of {_Color1} to "&7E.g(Chunk Loading, Player Joins, New Chunk loading, tnt, etc)."
						set line 4 of lore of {_Color1} to "&7Current Value: %{_Text}%"

						make gui slot loop-value with {_Color1} named "%{_ColorText1}%MinTPS":
							send "&7Type &c&lCANCEL &7to cancel the value change &8(&7Current Value: %{_Text}%&8)"
							set {_uuid} to {_p}'s uuid
							set {Walter::PlayerData::%{_uuid}%::Chat::ValueChange} to "MinTPS"
							close player's inventory
				else:
					make gui slot loop-value with {_W} named "&r"
	open last gui to {_p}

on chat:
	if {Walter::PlayerData::%player's uuid%::Chat::ValueChange} is set:
		if {Walter::PlayerData::%player's uuid%::Chat::ValueChange} = "MaxTPS":
			if message = "CANCEL" or "cancel":
				delete {Walter::PlayerData::%player's uuid%::Chat::ValueChange}
				send "&c&lCancled &7MaxTPS value change!"
			else:
				set {_numb} to message parsed as number
				if {_numb} is not set:
					send "&c&lInvalid &7number &8(&7type &c&lCANCEL&7 to cancel&8)"
				if {_numb} <= 20:
					send "&c&lInvalid &7MaxTPS number, cannot be set below 20" and "&8(&7type &c&lCANCEL&7 to cancel&8)"
				
				if {_numb} > 20:
					send "&a&lMaxTPS &7Value changed successfully! &8(&7OLD: &c&l%{Walter::Settings::LagCore::MaxTPS}%&7,NEW: &a&l%{_numb}%&8)"
					set {Walter::Settings::LagCore::MaxTPS} to {_numb}
		if {Walter::PlayerData::%player's uuid%::Chat::ValueChange} = "MinTPS":
			if message = "CANCEL" or "cancel":
				delete {Walter::PlayerData::%player's uuid%::Chat::ValueChange}
				send "&c&lCancled &7MinTPS value change!"
			else:
				set {_numb} to message parsed as number
				if {_numb} is not set:
					send "&c&lInvalid &7number &8(&7type &c&lCANCEL&7 to cancel&8)"
				if {_numb} >= 20:
					send "&c&lInvalid &7MinTPS number, cannot be set higher than 20" and "&8(&7type &c&lCANCEL&7 to cancel&8)"
				if {_numb} < 20:
					send "&a&lMinTPS &7Value changed successfully! &8(&7OLD: &c&l%{Walter::Settings::LagCore::MinTPS}%&7,NEW: &a&l%{_numb}%&8)"
					set {Walter::Settings::LagCore::MinTPS} to {_numb}
		cancel event


command /Walter:
	permission: Walter.Anticheat
	aliases: w
	trigger:
		create a gui with virtual chest named "&7&lWalter" with 3 rows:
			set {_B} to Brown Stained Glass pane
			set {_W} to White Stained Glass pane
			make gui slot 0 with {_W} named "&r"
			loop 27 times:
				make gui slot loop-value with {_W} named "&r"
				if loop-value = 11:
					make gui slot loop-value with Diamond Sword named "&lChecks":
						OpenMenu(player, 1)
				if loop-value = 13:
					make gui slot loop-value with Redstone named "&lSettings":
						OpenMenu(player, 2)
				if loop-value = 15:
					make gui slot loop-value with Head named "&lPlayers":
						OpenMenu(player, 3)
				if loop-value = 10:
					make gui slot loop-value with {_B} named "&r"
				if loop-value = 12:
					make gui slot loop-value with {_B} named "&r"
				if loop-value = 14:
					make gui slot loop-value with {_B} named "&r"
				if loop-value = 16:
					make gui slot loop-value with {_B} named "&r"
		open last gui to the player