# Walter Anticheat
# Created By LIWKK (Johannes) and EthoCryantic (Etho)

options:
	# [Version] current version of Walter :)
	Version: 1.0

	# [LagCore] Enable LagCore, LagCore helps prevent false positives by monitoring ticks per second (TPS, We suggest you keep this enabled)
	LagCore: true

	# [LagCore] Maximum TPS (Not adverage count) the anticheat will allow before registering as lagging E.g(Chunk Loading, Player Joins, New Chunk loading, tnt, etc).
	LagCore.MaxTPS: 21.85

	# [LagCore] Minimum TPS (Not adverage count) the anticheat will allow before registering as lagging E.g(Chunk Loading, Player Joins, New Chunk loading, tnt, etc).
	LagCore.MinTPS: 18.15

	# [LagCore] The ammount of time you want neon to stop flagging players when the server lags badly. 6
	LagCore.SevereLag.timer: 6 seconds

	# [LagCore] The ammount of time you want neon to stop flagging players when the server lags slightly. 3
	LagCore.MinorLag.timer: 3 seconds


#LagCore by Neon (https://forums.skunity.com/resources/neon-anticheat-packet-detections.907/)
every second:
	if {@LagCore} = true:
		if {Walter::LagCore::DisableTimer} != 0 seconds:
			remove 1 second from {Walter::LagCore::DisableTimer}
		else:
			delete {Walter::LagCore::DisableType}
		add 1 to {Walter::LagCore::Switch}
		if {Walter::LagCore::Switch} = 1:
			set {Walter::LagCore::PrevTime} to unix timestamp of now
		if {Walter::LagCore::Switch} = 2:
			delete {Walter::LagCore::Switch}
			set {Walter::LagCore::TPS} to 20 / (unix timestamp of now - {Walter::LagCore::PrevTime})
			if check [{Walter::LagCore::TPS} > {@LagCore.MaxTPS}] or [{Walter::LagCore::TPS} < {@LagCore.MinTPS}]:
				if check [{Walter::LagCore::TPS} > 40] or [{Walter::LagCore::TPS} < 10]:
					if check [{Walter::LagCore::DisableTimer} != 0 seconds]->[{Walter::LagCore::DisableTimer} <= 12 seconds]:
						add {@LagCore.SevereLag.timer} to {Walter::LagCore::DisableTimer}
					else:
						set {Walter::LagCore::DisableTimer} to {@LagCore.SevereLag.timer}
					set {Walter::LagCore::DisableType} to "S"
				else:
					if check [{Walter::LagCore::DisableTimer} != 0 seconds]->[{Walter::LagCore::DisableTimer} <= 9 seconds]:
						add {@LagCore.MinorLag.timer} to {Walter::LagCore::DisableTimer}
					else:
						set {Walter::LagCore::DisableTimer} to {@LagCore.MinorLag.timer}
					set {Walter::LagCore::DisableType} to "M"

# Walter Utilites+
on join:
	set {Walter::Utilites::IsDead::%player's uuid%} to false

on death:
	victim is player
	set {Walter::Utilites::IsDead::%player's uuid%} to true
on respawn:
	set {Walter::Utilites::IsDead::%player's uuid%} to false

on rightclick:
	if player's tool is ender pearl:
		set {Walter::Utilites::Enderpearling::%player's uuid%} to true
on projectile hit:
	if event-entity is a ender pearl:
		set {Walter::Utilites::Enderpearling::%event-entity's uuid%} to false

on join:
	set {Walter::Utilites::JoinTime::%player's uuid%} to now

on damage:
	victim is player
	set {Walter::Utilites::LastDamage::%victim's uuid%} to now
	set {Walter::Utilites::IsAttacked::%victim's uuid%} to true
	wait 3.25 ticks
	set {Walter::Utilites::IsAttacked::%victim's uuid%} to false

on place:
	if event-entity is player:
		set {Walter::Utilites::LastPlace::%player's uuid%} to now

# Utility Functions
function IsDead(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if {Walter::Utilites::IsDead::%{_uuid}%} = true:
		return true
	else:
		return false

function IsEnderpearling(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if {Walter::Utilites::Enderpearling::%{_uuid}%} = true:
		return true
	else:
		return false

function IsCreative(p: player) :: boolean:
	if gamemode of {_p} is survival or adventure:
		return false
	else:
		return true
	return false

function IsJoining(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if difference between {Walter::Utilites::JoinTime::%{_uuid}%} and now < 1.5 seconds: #8
		return true
	else:
		return false

function IsAttacked(p: player) :: boolean:
	set {_uuid} to uuid of {_p}
	if {Walter::Utilites::IsAttacked::%{_uuid}%} = true:
		return true
	else:
		return false

function DistanceToGround(p: player) :: number:
	loop 256 times:
		if block loop-numbers below {_p} is not air:
			set {_A} to loop-numbers
			remove 1 from {_A}
			set {_D} to {_p}'s y-coord - {_A}
			set {_Cw} to abs({_D} - floor({_D}))
			add {_A} to {_Cw}
			return {_Cw}
			exit 1 loop
	return null

command /Walter:
	permission: Walter.Anticheat
	aliases: w
	trigger:
		create a gui with virtual chest named "&8&lWalter" with 3 rows:
			set {_C} to Red Stained Glass pane
			make gui slot 0 with {_W} named "&r"
			loop 36 times:
				if random integer between 1 and 2 = 1:
					set {_Col} to White Stained Glass pane
				else:
					set {_Col} to Brown Stained Glass pane
				make gui slot loop-value with {_Col} named "&r"
				if loop-value = 11:
					make gui slot loop-value with {_C} named "&r":
						send "Stuffs"
				if loop-value = 13:
					make gui slot loop-value with {_C} named "&r":
						send "More Stuffs"
				if loop-value = 15:
					make gui slot loop-value with {_C} named "&r":
						send "Event More Stuffs"
		open last gui to the player